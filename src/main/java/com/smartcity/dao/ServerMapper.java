package com.smartcity.dao;

import com.smartcity.models.Server;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ServerMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table servers
     *
     * @mbggenerated
     */
    @Delete({
        "delete from servers",
        "where serverid = #{serverid,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer serverid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table servers
     *
     * @mbggenerated
     */
    @Insert({
        "insert into servers (serverid, servername, ",
        "connectStatus)",
        "values (#{serverid,jdbcType=INTEGER}, #{servername,jdbcType=VARCHAR}, ",
        "#{connectstatus,jdbcType=VARCHAR})"
    })
    int insert(Server record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table servers
     *
     * @mbggenerated
     */
    int insertSelective(Server record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table servers
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "serverid, servername, connectStatus",
        "from servers",
        "where serverid = #{serverid,jdbcType=INTEGER}"
    })
    @ResultMap("BaseResultMap")
    Server selectByPrimaryKey(Integer serverid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table servers
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Server record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table servers
     *
     * @mbggenerated
     */
    @Update({
        "update servers",
        "set servername = #{servername,jdbcType=VARCHAR},",
          "connectStatus = #{connectstatus,jdbcType=VARCHAR}",
        "where serverid = #{serverid,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Server record);
    List<Server> findAll();
}